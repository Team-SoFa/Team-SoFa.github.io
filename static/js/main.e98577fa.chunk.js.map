{"version":3,"sources":["redux/reducers/authReducer.js","redux/reducers/folderReducer.js","redux/store.js","components/OutsideClick.js","components/Button/Button.js","components/Dropdown/Dropdown.js","components/Textfield/Textfield.js","components/Modal/Modal.js","assets/icon/MenuIcon.js","assets/icon/DownIcon.js","assets/icon/SearchIcon.js","assets/icon/AlarmLineIcon.js","assets/icon/AlarmFilledIcon.js","components/Layout/Header.js","components/Layout/Footer.js","components/Accordion/Accordion.js","pages/LandingPage.js","services/apiClient.js","services/loginService.js","services/folderService.js","pages/SignPage.js","services/memberService.js","redux/actions/authActions.js","services/linkCardService.js","services/settingService.js","components/SideMenu/SideMenu.js","components/LinkCard/LinkCard.js","components/LinkCard/ShowLinkCard.js","components/LinkCard/BookmarkDetail.js","pages/RemovedItemsPage.js","pages/FolderPage.js","pages/HomePage.js","components/LinkCard/bookmarks.js","pages/TermsPage.js","pages/PrivacyPolicy.js","App.js","index.js"],"names":["initialState","accessToken","refreshToken","authReducer","state","arguments","length","undefined","action","type","payload","folderList","folderReducer","map","folder","id","name","rootReducer","combineReducers","auth","store","createStore","OutsideClick","el","isActive","setIsActive","useState","useEffect","pageClickEvent","e","current","contains","target","window","addEventListener","removeEventListener","Button","_ref","label","onClick","className","Icon","imgSrc","imgAlt","React","createElement","Fragment","aria-label","src","alt","Dropdown","options","onSelect","onDelete","onMouseEnter","onMouseLeave","dropdownRef","useRef","isOpen","setIsOpen","selectedValue","setSelectedValue","handleSelect","value","content","ref","toggleDropdown","img","option","index","key","stopPropagation","TextField","forwardRef","onChange","placeholder","required","recentSearches","onSearchSelect","onSearchDelete","isDropdownOpen","setIsDropdownOpen","onFocus","handleFocus","handleClick","selected","Modal","onClose","children","modalRef","MenuIcon","width","height","viewBox","fill","xmlns","d","DownIcon","SearchIcon","AlarmLineIcon","AlarmFilledIcon","Header","toggleMenu","location","useLocation","alarmOption","setAlarmOption","folderOption","setFolderOption","tagOption","setTagOption","searchValue","setSearchValue","isHovered","setIsHovered","setRecentSearches","folderOpt","item","tagsOpt","alarmOptions","headerStyle","backgroundColor","paddingTop","isModalOpen","setIsModalOpen","style","pathname","event","searchToDelete","updatedSearches","filter","search","handleMouseEnter","handleMouseLeave","openModal","closeModal","reload","Link","to","Footer","Accordion","title","toggleAccordion","LandingPage","href","rel","apiClient","axios","create","baseURL","process","timeout","headers","getAccessToken","getState","tokenGet","async","url","params","response","get","data","tokenPost","console","log","post","tokenDel","delete","tokenPatch","patch","tempLogin","Error","error","folderPut","put","tokenPut","ImagePlaceholder","placeholderStyle","SignPage","dispatch","useDispatch","setFolderList","linkCardListDetail","setLinkCardListDetail","hanldeFolderGet","folderGet","floderList","err","fetchImageUrlFromPage","_doc$querySelector","proxyUrl","targetUrl","fetch","html","text","doc","DOMParser","parseFromString","imageUrl","querySelector","_doc$querySelector2","hanldeMemberGet","memberGet","setTokens","folderPost","lastFolder","folderDelete","linkCardPost","linkCardAiPost","_response$folder","_response$tags","transformedData","folderId","tagList","tags","tag","tagType","memo","summary","sortBy","sortOrder","lastId","limit","linkCardListGet","settingGet","settingPatch","SideMenu","currentPath","path","LinkCard","bookmark","onEdit","hover","setHover","open","ShowLinkCard","bookmarks","sideMenuOpen","bookmarkDetailOpen","onLinkCardClick","sortingOption","sortingDirOption","gridColumns","setGridColumns","calculateGridColumns","windowWidth","innerWidth","columns","Math","floor","parseFloat","getComputedStyle","document","documentElement","fontSize","sortedBookmarks","sortBookmarks","sortingDir","sorted","sort","a","b","localeCompare","reverse","gridTemplateColumns","BookmarkDetail","RemovedItemsPage","onAddBookmark","onDeleteBookmark","loading","setLoading","isMenuOpen","setIsMenuOpen","selectedBookmark","setSelectedBookmark","setSortingOption","setSortingDirOption","sortingOpt","sortingDirOpt","handleBookmarkClose","FolderPage","folderName","setFolderName","fetchUserInfo","HomePage","username","setUsername","mostPopularTags","setMostPopularTags","nickname","handleDelete","handleEdit","handleAddBookmark","newBookmark","handleBookmarkClick","renderSection","TermsPage","PrivacyPolicy","App","setBookmarks","initialBookmarks","prevBookmarks","Date","now","handleDeleteBookmark","Routes","Route","element","ReactDOM","createRoot","getElementById","render","StrictMode","Provider","BrowserRouter","basename"],"mappings":"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","file":"static/js/main.e98577fa.chunk.js","sourcesContent":["// src/redux/reducers/authReducer.js\nconst initialState = {\n    accessToken: '',\n    refreshToken: '',\n  };\n  \n  const authReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case 'SET_TOKENS':\n        return {\n          ...state,\n          accessToken: action.payload.accessToken,\n          refreshToken: action.payload.refreshToken,\n        };\n      case 'CLEAR_TOKENS':\n        return {\n          ...state,\n          accessToken: '',\n          refreshToken: '',\n        };\n      default:\n        return state;\n    }\n  };\n  \n  export default authReducer;\n  ","// src/redux/reducers/folderReducer.js\n\nconst initialState = {\n    folderList: [],\n  };\n  \n  const folderReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case \"SET_FOLDER_LIST\":\n        return {\n          ...state,\n          folderList: action.payload, // 서버에서 받은 폴더 목록으로 갱신\n        };\n      case \"UPDATE_FOLDER_NAME\":\n        return {\n          ...state,\n          folderList: state.folderList.map((folder) =>\n            folder.id === action.payload.id\n              ? { ...folder, name: action.payload.name }\n              : folder\n          ),\n        };\n      default:\n        return state;\n    }\n  };\n  \n  export default folderReducer;\n  ","// src/redux/store.js\nimport { createStore, combineReducers } from 'redux';\nimport authReducer from './reducers/authReducer';\nimport folderReducer from './reducers/folderReducer';\n\nconst rootReducer = combineReducers({\n  auth: authReducer,  // 'auth'로 상태에 접근\n  folder: folderReducer\n});\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import { useEffect, useState } from \"react\";\n\nexport const OutsideClick = (el, initialState) => {\n  const [isActive, setIsActive] = useState(initialState);\n\n  useEffect(() => {\n    const pageClickEvent = (e) => {\n      if (el.current !== null && !el.current.contains(e.target)) {\n        setIsActive(false); // 외부를 클릭하면 닫힘\n      }\n    };\n\n    if (isActive) {\n      window.addEventListener(\"click\", pageClickEvent);\n    }\n\n    return () => {\n      window.removeEventListener(\"click\", pageClickEvent);\n    };\n  }, [isActive, el]);\n\n  return [isActive, setIsActive];\n};\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = ({ label, onClick, className, Icon, imgSrc, imgAlt }) => {\n  return (\n    <button className={`btn ${className}`} onClick={onClick}>\n      <>\n        {Icon && (\n          <span className=\"btn-icon\" aria-label={imgAlt || \"button icon\"}>\n            <Icon />\n          </span>\n        )}\n        {imgSrc && (\n          <img\n            className=\"btn-img\"\n            src={imgSrc}\n            alt={imgAlt || \"button image\"}\n          />\n        )}\n        {label && <span>{label}</span>}\n      </>\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState, useRef } from \"react\";\nimport \"./Dropdown.css\";\nimport { OutsideClick } from \"../OutsideClick\";\nimport Button from \"../Button/Button\";\n\nconst Dropdown = ({\n  className,\n  Icon,\n  options,\n  label,\n  onSelect,\n  onDelete,\n  onMouseEnter,\n  onMouseLeave,\n}) => {\n  const dropdownRef = useRef(null); //드롭다운 요소 참조를 위한 ref 생성\n  const [isOpen, setIsOpen] = OutsideClick(dropdownRef, false); //OutsideClick 사용\n  const [selectedValue, setSelectedValue] = useState(null); //선택된 값 상태 관리\n\n  const handleSelect = (value) => {\n    // className이 \"alarm\"일 때 label을 변경하지 않음\n    if (className !== \"alarm\") {\n      setSelectedValue(\n        value.content === \"폴더 전체\" ? { label: \"폴더 전체\" } : value\n      );\n    }\n    setIsOpen(false); // 드롭다운 닫기\n    onSelect(value);\n  };\n  const toggleDropdown = () => {\n    //드롭다운 토글 함수\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div\n      className={`dropdown ${className}`}\n      ref={dropdownRef}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      <div\n        className={`dropdown-header ${isOpen ? \"open\" : \"\"}`}\n        onClick={toggleDropdown}\n      >\n        {Icon && (\n          <span className=\"dropdown-header-img\" aria-label=\"Dropdown Img\">\n            <Icon />\n          </span>\n        )}\n        {selectedValue ? (\n          selectedValue.label\n        ) : (\n          <span className=\"dropdown-placeholder\">{label}</span>\n        )}\n        {className === \"alarm\" && options?.length > 0 && (\n          <span className=\"dropdown-badge\"></span>\n        )}\n      </div>\n\n      {(isOpen || className === \"search-dropdown\") && (\n        <div className=\"dropdown-menu\">\n          {[\n            ...(className === \"dropdown-folder-select\" // className 조건 추가\n              ? [{ content: label, img: null }]\n              : []),\n            ...options,\n          ].map((option, index) => (\n            <div\n              key={index}\n              className=\"dropdown-option\"\n              onClick={() => handleSelect(option)}\n            >\n              {option.img && (\n                <img src={option.img} alt=\"\" className=\"dropdown-option-img\" />\n              )}\n              <span onClick={() => handleSelect(option.content)}>\n                {option.content}\n              </span>\n              <Button className=\"dropdown-select\" label=\"선택\" />\n\n              {onDelete && (\n                <Button\n                  className=\"dropdown-delete\"\n                  label=\"✕\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete(option.content);\n                  }}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n","// src/components/TextField.js\nimport React, { useRef, forwardRef } from \"react\";\nimport \"./Textfield.css\"; // 스타일 파일 (선택)\nimport Dropdown from \"../Dropdown/Dropdown\";\nimport { OutsideClick } from \"../OutsideClick\";\n\nconst TextField = forwardRef(({\n  label,\n  value,\n  onChange,\n  placeholder,\n  type = \"text\",\n  required = false,\n  Icon,\n  recentSearches = [],\n  onSearchSelect,\n  onSearchDelete,\n}, ref) => {\n  const dropdownRef = useRef(null);\n  const [isDropdownOpen, setIsDropdownOpen] = OutsideClick(dropdownRef, false);\n\n  const handleFocus = () => {\n    setIsDropdownOpen(true);\n  };\n\n  const handleClick = () => {\n    setIsDropdownOpen(true); // 입력 필드 클릭 시 항상 드롭다운 열기\n  };\n  \n  const handleSelectSearch = (selected) => {\n    onSearchSelect(selected.content); // 부모 컴포넌트로 선택된 값을 전달\n    setIsDropdownOpen(false); // 선택 시 드롭다운 닫기\n  };\n\n  return (\n    <div className=\"text-field\" ref={dropdownRef}>\n      {label && <label className=\"text-field-label\">{label}</label>}\n      <div className=\"text-filed-wrapper\">\n        {Icon && (\n          <span className=\"text-field-img\" aria-label=\"Field Icon\">\n            {\" \"}\n            <Icon />{\" \"}\n          </span>\n        )}\n        <input\n          className=\"text-field-input\"\n          type={type}\n          value={value}\n          onChange={onChange}\n          onFocus={handleFocus}\n          onClick={handleClick} // 클릭 이벤트 추가\n          placeholder={placeholder}\n          required={required}\n          ref={ref}\n        />\n      </div>\n      {isDropdownOpen && recentSearches.length > 0 && (\n        <Dropdown\n          className=\"search-dropdown\"\n          options={recentSearches}\n          label=\"최근검색\"\n          onSelect={handleSelectSearch}\n          onDelete={onSearchDelete}\n        />\n      )}\n    </div>\n  );\n});\n\nexport default TextField;\n","// src/components/Modal.js\nimport React, { useRef } from \"react\";\nimport \"./Modal.css\";\nimport { OutsideClick } from \"../OutsideClick\";\n\nconst Modal = ({ isOpen, onClose, children }) => {\n  const modalRef = useRef(null);\n  const [isActive, setIsActive] = OutsideClick(modalRef, isOpen);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\" ref={modalRef}>\n      <div className=\"modal\">\n        <button className=\"modal-close\" onClick={onClose}>\n          X\n        </button>\n        <div className=\"modal-content\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\n\nconst MenuIcon = () => {\n  return (\n    <svg\n      width=\"1.5rem\"\n      height=\"1.5rem\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M2.81763 17.2222C2.81763 17.8359 3.31509 18.3333 3.92874 18.3333H21.5408C22.1544 18.3333 22.6519 17.8359 22.6519 17.2222V17.2222C22.6519 16.6086 22.1544 16.1111 21.5408 16.1111H3.92874C3.31509 16.1111 2.81763 16.6086 2.81763 17.2222V17.2222ZM2.81763 11.6667C2.81763 12.2803 3.31509 12.7778 3.92874 12.7778H21.5408C22.1544 12.7778 22.6519 12.2803 22.6519 11.6667V11.6667C22.6519 11.053 22.1544 10.5556 21.5408 10.5556H3.92874C3.31509 10.5556 2.81763 11.053 2.81763 11.6667V11.6667ZM3.92874 5C3.31509 5 2.81763 5.49746 2.81763 6.11111V6.11111C2.81763 6.72476 3.31509 7.22222 3.92874 7.22222H21.5408C22.1544 7.22222 22.6519 6.72476 22.6519 6.11111V6.11111C22.6519 5.49746 22.1544 5 21.5408 5H3.92874Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport default MenuIcon;\n","import React from 'react';\n\nconst DownIcon = () => {\n  return (\n    <svg\n      width=\"1.5rem\"\n      height=\"1.5rem\"\n      viewBox=\"0 0 30 30\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M5.72599 7.94731C6.24373 7.42524 7.08762 7.42478 7.60594 7.94628L12.7347 13.1067L17.8635 7.94628C18.3818 7.42478 19.2257 7.42524 19.7435 7.94731V7.94731C20.2556 8.46367 20.2556 9.29633 19.7435 9.81269L13.1189 16.4926C12.9073 16.706 12.5622 16.706 12.3505 16.4926L5.72599 9.81269C5.2139 9.29633 5.2139 8.46367 5.72599 7.94731V7.94731Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport default DownIcon;\n","import React from 'react';\n\nconst SearchIcon = () => {\n  return (\n    <svg\n      width=\"1.5rem\"\n      height=\"1.5rem\"\n      viewBox=\"0 0 25 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M16.9933 14.5786L16.2303 13.8157C16.8748 13.1647 17.5603 11.2739 17.5603 9.43282C17.5603 5.32762 14.2603 2 10.1891 2C6.11791 2 2.81787 5.32762 2.81787 9.43282C2.81787 13.538 6.11791 16.8656 10.1891 16.8656C12.0149 16.8656 13.4378 16.3487 14.4961 15.5644L15.2922 16.2939L20.2524 21.2855C20.6437 21.6792 21.2808 21.6789 21.6717 21.2847L21.9545 20.9996C22.3408 20.6101 22.3412 19.982 21.9552 19.592L16.9933 14.5786ZM10.1891 14.5786C7.36535 14.5786 5.08594 12.2802 5.08594 9.43282C5.08594 6.58548 7.36535 4.28702 10.1891 4.28702C13.0128 4.28702 15.2922 6.58548 15.2922 9.43282C15.2922 12.2802 13.0128 14.5786 10.1891 14.5786Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport default SearchIcon;\n","import React from 'react';\n\nconst AlarmLineIcon = () => {\n  return (\n    <svg\n      width=\"1.5rem\"\n      height=\"1.5rem\"\n      viewBox=\"4 4 25 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M12.3747 22C13.1498 22 13.8272 21.557 14.1703 20.9098C14.429 20.4218 13.9612 19.9487 13.409 19.9487H11.3404C10.7881 19.9487 10.3203 20.4218 10.579 20.9098C10.9221 21.557 11.5996 22 12.3747 22ZM18.4775 15.8462V10.7179C18.4775 7.56923 16.8196 4.93333 13.9004 4.2359V3.53846C13.9004 2.68718 13.2189 2 12.3747 2C11.5305 2 10.849 2.68718 10.849 3.53846V4.2359C7.93994 4.93333 6.27183 7.55897 6.27183 10.7179V15.8462L4.4482 17.685C4.31326 17.8211 4.23755 18.005 4.23755 18.1966V18.1966C4.23755 18.5978 4.56281 18.9231 4.96404 18.9231H19.7853C20.1866 18.9231 20.5118 18.5978 20.5118 18.1966V18.1966C20.5118 18.005 20.4361 17.8211 20.3012 17.685L18.4775 15.8462ZM16.4432 16.8718H8.30611V10.7179C8.30611 8.17436 9.842 6.10256 12.3747 6.10256C14.9074 6.10256 16.4432 8.17436 16.4432 10.7179V16.8718Z\"\n        fill=\"black\"\n      />\n    </svg>\n  );\n};\n\nexport default AlarmLineIcon;\n","import React from 'react';\n\nconst AlarmFilledIcon = () => {\n  return (\n    <svg\n      width=\"1.5rem\"\n      height=\"1.5rem\"\n      viewBox=\"4 4 26 26\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M12.5293 22C13.3044 22 13.9819 21.557 14.325 20.9098C14.5837 20.4218 14.1159 19.9487 13.5636 19.9487H11.4951C10.9428 19.9487 10.475 20.4218 10.7337 20.9098C11.0768 21.557 11.7543 22 12.5293 22ZM18.6322 15.8462V10.7179C18.6322 7.56923 16.9743 4.93333 14.0551 4.2359V3.53846C14.0551 2.68718 13.3736 2 12.5293 2C11.6851 2 11.0036 2.68718 11.0036 3.53846V4.2359C8.09461 4.93333 6.42649 7.55897 6.42649 10.7179V15.8462L4.60286 17.685C4.46792 17.8211 4.39221 18.005 4.39221 18.1966V18.1966C4.39221 18.5978 4.71747 18.9231 5.1187 18.9231H19.94C20.3412 18.9231 20.6665 18.5978 20.6665 18.1966V18.1966C20.6665 18.005 20.5908 17.8211 20.4558 17.685L18.6322 15.8462Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport default AlarmFilledIcon;\n","import React, { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport TextField from \"../Textfield/Textfield\";\nimport Button from \"../Button/Button\";\nimport Dropdown from \"../Dropdown/Dropdown\";\nimport Modal from \"../Modal/Modal\"; // Modal 컴포넌트 import\n\nimport \"./HeaderStyle.css\";\nimport MenuIcon from \"../../assets/icon/MenuIcon\";\nimport DownIcon from \"../../assets/icon/DownIcon\";\nimport SearchIcon from \"../../assets/icon/SearchIcon\";\nimport AlarmLineIcon from \"../../assets/icon/AlarmLineIcon\";\nimport AlarmFilledIcon from \"../../assets/icon/AlarmFilledIcon\";\n\nconst Header = ({ type, toggleMenu }) => {\n  const location = useLocation();\n  const [alarmOption, setAlarmOption] = useState(\"\");\n  const [folderOption, setFolderOption] = useState(\"폴더선택\");\n  const [tagOption, setTagOption] = useState(\"태그선택\");\n  const [searchValue, setSearchValue] = useState(\"\"); //검색창 최근검색어 임시 값\n  const [isHovered, setIsHovered] = useState(false);\n\n  // ================ 임시 데이터 =====================\n  const [recentSearches, setRecentSearches] = useState([\n    { img: \"example.png\", content: \"React\" },\n    { img: \"example.png\", content: \"JavaScript\" },\n    { img: \"example.png\", content: \"Frontend\" },\n    { img: \"example.png\", content: \"CSS\" },\n    { img: \"example.png\", content: \"개발자 꿀팁\" },\n    { img: \"example.png\", content: \"html은 무엇인가\" },\n  ]);\n\n  const folderOpt = [\"폴더1\", \"폴더2\", \"폴더3\"].map((item) => ({\n    label: item,\n    content: item,\n  }));\n  const tagsOpt = [\"Documents\", \"Pictures\", \"Music\", \"태그어쩌구1\"].map(\n    (item) => ({\n      label: item,\n      content: item,\n    })\n  );\n  const alarmOptions = [\n    {\n      img: \"example.png\",\n      label: \"리마인드\",\n      content: \"3일 후 휴지통에서 n개의 링크들이 영원히 빛을 잃게 됩니다.\",\n    },\n    {\n      img: \"example.png\",\n      label: \"어쩌구\",\n      content: \"또 어떤 알람이 있을까요\",\n    },\n    {\n      img: \"example.png\",\n      label: \"리마인드\",\n      content: \"새로운 업데이트가 있습니다.\",\n    },\n    {\n      img: \"example.png\",\n      label: \"리마인드\",\n      content: \"새로운 업데이트가 있습니다.\",\n    },\n    {\n      img: \"example.png\",\n      label: \"리마인드\",\n      content: \"새로운 업데이트가 있습니다.\",\n    },\n    {\n      img: \"example.png\",\n      label: \"리마인드\",\n      content: \"새로운 업데이트가 있습니다.\",\n    },\n  ].map((item) => ({\n    ...item,\n  }));\n  const profileImg = \"example.png\";\n\n  // ================ 임시 데이터 =====================\n\n  const handleAlarmSelect = (option) => {\n    setAlarmOption(option.content);\n  };\n  const handleFolderSelect = (option) => {\n    setFolderOption(option.content);\n  };\n  const handleTagSelect = (option) => {\n    setTagOption(option.content);\n  };\n\n  const handleSearchChange = (event) => {\n    setSearchValue(event.target.value);\n  };\n  // 검색어 삭제 처리 함수\n  const handleSearchDelete = (searchToDelete) => {\n    const updatedSearches = recentSearches.filter(\n      (search) => search.content !== searchToDelete\n    );\n    setRecentSearches(updatedSearches); // 상태 업데이트\n  };\n\n  const headerStyle =\n    type === \"ONBOARDING\"\n      ? { backgroundColor: \"#F1F1F1\", paddingTop: \"1rem\" }\n      : {};\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 상태 추가\n\n  // 모달 open/close 함수\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n\n  //마우스 호버 이벤트 함수\n  const handleMouseEnter = () => setIsHovered(true);\n  const handleMouseLeave = () => setIsHovered(false);\n\n  return (\n    <header className=\"header\" style={headerStyle}>\n      {/* ========== LINK CARD PAGES ========== */}\n      {location.pathname !== \"/\" && (\n        <>\n          <Button\n            className=\"menu-img\"\n            onClick={toggleMenu}\n            Icon={MenuIcon}\n            imgAlt=\"menu\"\n          />\n          <div className=\"searchers\">\n            <Dropdown\n              className=\"dropdown-folder-select\"\n              options={folderOpt}\n              label=\"폴더 전체\"\n              Icon={DownIcon}\n              onSelect={handleFolderSelect}\n            />\n            <Dropdown\n              className=\"dropdown-tag-select\"\n              options={tagsOpt}\n              label=\"태그선택\"\n              Icon={DownIcon}\n              onSelect={handleTagSelect}\n            />\n            <TextField\n              className=\"text_field\"\n              placeholder=\"검색어를 입력하세요.\"\n              Icon={SearchIcon}\n              value={searchValue}\n              onChange={handleSearchChange}\n              recentSearches={recentSearches} // 최근 검색어 전달\n              onSearchSelect={\n                (selected) => setSearchValue(selected) // 선택된 검색어를 검색창에 반영\n              }\n              onSearchDelete={handleSearchDelete}\n            />\n            <Button className=\"search\" label=\"검색\" />\n            <Button label=\"초기화\" />\n          </div>\n          <div className=\"user_info\">\n            <Dropdown\n              className=\"alarm\"\n              options={alarmOptions}\n              Icon={isHovered ? AlarmFilledIcon : AlarmLineIcon}\n              onSelect={handleAlarmSelect}\n              onMouseEnter={handleMouseEnter} // 마우스 오버 시 상태 변경\n              onMouseLeave={handleMouseLeave} // 마우스 아웃 시 상태 변경\n            />\n            <Button\n              className=\"user-info\"\n              imgSrc=\"example.png\"\n              imgAlt=\"user-info\"\n              onClick={openModal}\n            />\n            <Modal isOpen={isModalOpen} onClose={closeModal} />\n          </div>\n        </>\n      )}\n\n      {/* ========== Landing PAGE ========== */}\n      {location.pathname === \"/\" && (\n        <>\n          <img\n            className=\"logo\"\n            src=\"example.png\"\n            alt=\"logo\"\n            onClick={() => window.location.reload()}\n          />\n          <div className=\"buttons\">\n            <Button label=\"확장 프로그램 추가하기\" />\n            <Link to=\"/homepage\">\n              <Button label=\"[임시]홈P\" />\n            </Link>\n            <Link to=\"/signpage\">\n              <Button label=\"[임시]SignP\" />\n            </Link>\n          </div>\n        </>\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./footer-layout.css\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <h2>서비스 메인 슬로건 코멘트</h2>\n      <button className=\"button\">시작하기</button>\n      <div className=\"footer-contents\">\n        <div className=\"left-contents\">\n          <p>copyrights @sofa</p>\n          <p>기타 내용1</p>\n          <p>기타 내용2</p>\n        </div>\n        <div className=\"right-contents\">\n          <Link to=\"/termspage\">\n            <p>이용약관</p>\n          </Link>\n          <Link to=\"/privacypolicy\">\n            <p>개인정보처리방침</p>\n          </Link>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport \"./Accordion.css\";\n// import openIcon from \"example.png\";\n// import closeIcon from \"example.png\";\n\nconst Accordion = ({ title, content, type }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleAccordion = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className={`accordion ${type}`}>\n      <div className=\"accordion-header\" onClick={toggleAccordion}>\n        <p>{title}</p>\n        <img\n          src={isOpen ? \"example.png\" : \"example.png\"}\n          alt={isOpen ? \"Open\" : \"Close\"}\n          className=\"accordion-icon\"\n        />\n      </div>\n      {isOpen && <div className=\"accordion-content\">{content}</div>}\n    </div>\n  );\n};\n\nexport default Accordion;\n","import React from \"react\";\nimport Header from \"../components/Layout/Header.js\";\nimport Footer from \"../components/Layout/Footer.js\";\nimport Accordion from \"../components/Accordion/Accordion.js\";\n\nimport \"./LandingPage.css\";\n\nconst LandingPage = () => {\n  const answer1 =\n    \"A. Chrome Extension에서 확장 프로그램을 다운받아 사용합니다.\";\n  const answer2 =\n    \"A. 오늘 저녁은 아직 알 수가 없는데요, 집에 참치와 무 무침이 있어서 그걸 먹을 수도 있고 그냥 라면을 먹을 수도 있지만 불닭은 안먹을 겁니다. 어제 먹었기 때문입니다.?\";\n  const answer3 = \"blah blah\";\n\n  return (\n    <div className=\"landing-page\">\n      <Header type=\"ONBOARDING\" />\n      <main className=\"main-style\">\n        <section className=\"SLOGAN_SEC main-style\">\n          <h1 className=\"slogan\">당신의 시간을 절약하는 최고의 서비스</h1>\n          <p>확장 프로그램을 추가하고 더 많은 기능을 경험하세요</p>\n          <a\n            className=\"button\"\n            href=\"https://chrome.google.com/webstore\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Chrome Web Store 바로가기\n          </a>\n        </section>\n        <section className=\"MAIN_FEAT_SEC  main-style\">\n          <img className=\"service-icon\" src=\"example.png\" alt=\"icon\" />\n          <h2 className=\"title\">주요 서비스 기능, 장점 소개</h2>\n          <div className=\"content-img  main-style\">\n            <img src=\"example.png\" width={\"200px\"} alt=\"main content1\" />\n            <img src=\"example.png\" width={\"200px\"} alt=\"main content2\" />\n            <img src=\"example.png\" width={\"200px\"} alt=\"main content3\" />\n          </div>\n        </section>\n\n        <section className=\"OTHER_FEAT_SEC  main-style\">\n          <img className=\"service-icon\" src=\"example.png\" alt=\"icon\" />\n          <h2 className=\"title\">기타 추가 서비스 소개</h2>\n          <div className=\"grid\">\n            <div className=\"card\">\n              <img src=\"example.png\" alt=\"icon\" />\n              <p>당신만의 북마크 폴더를 공유하고 팀원들과 협업하세요</p>\n            </div>\n            <div className=\"card\">\n              <img src=\"example.png\" alt=\"icon\" />\n              <p>폴더와 태그별로 북마크를 관리하세요</p>\n            </div>\n            <div className=\"card\">\n              <img src=\"example.png\" alt=\"icon\" />\n              <p>\n                이것은 다섯줄짜리 텍스트를 보기 위함입니다. 이것은 다섯줄짜리\n                텍스트를 보기 위함입니다. 이것은 다섯줄짜리\n              </p>\n            </div>\n            <div className=\"card\">\n              <img src=\"example.png\" alt=\"icon\" />\n              <p>\n                이것은 네줄짜리 텍스트를 보기 위함입니다. 이것은 네줄짜리\n                텍스트를 보기 위함입니다.\n              </p>\n            </div>\n            <div className=\"card\">\n              <img src=\"example.png\" alt=\"icon\" />\n              <p>description for feature5</p>\n            </div>\n            <div className=\"card\">\n              <img src=\"example.png\" alt=\"icon\" />\n              <p>description for feature6</p>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"FAQ_SEC  main-style\">\n          <img className=\"service-icon\" src=\"example.png\" alt=\"icon\" />\n          <h2 className=\"title\">자주 묻는 질문 / FAQ</h2>\n          <Accordion\n            title=\"Q1. 어떻게 사용하나요?\"\n            content={answer1}\n            type=\"FAQ\"\n          />\n          <Accordion\n            title=\"Q2. 오늘 저녁은 뭔가요?\"\n            content={answer2}\n            type=\"FAQ\"\n          />\n          <Accordion\n            title=\"Q3. 자주 묻는 질문이 뭔가요?\"\n            content={answer3}\n            type=\"FAQ\"\n          />\n        </section>\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default LandingPage;\n","import axios from 'axios';\nimport store from '../redux/store'; // store 가져오기\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000, // 타임아웃 설정\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Redux에서 accessToken을 가져오는 함수\nconst getAccessToken = () => {\n  const state = store.getState();  // store 상태 가져오기\n  return state.auth.accessToken;   // authReducer에서 관리하는 accessToken 가져오기\n};\n\n// GET 요청을 위한 함수 (토큰 없는 기본 GET 요청)\nexport const get = async (url, params = {}, headers = {}) => {\n  const response = await apiClient.get(url, { params, headers });\n  return response.data;\n};\n\n// POST 요청을 위한 함수 (토큰 없는 기본 POST 요청)\nexport const post = async (url, data = {}, headers = {}) => {\n  console.log(\"Final Headers:\", headers);\n  console.log('data:', data);\n  const response = await apiClient.post(url, data, { headers });\n  return response.data;\n};\n\n// PUT 요청을 위한 함수 (토큰 없는 기본 PUT 요청)\nexport const put = async (url, data = {}, headers = {}) => {\n  const response = await apiClient.put(url, data, { headers });\n  return response.data;\n};\n\n// DELETE 요청을 위한 함수 (토큰 없는 기본 DELETE 요청)\nexport const del = async (url, headers = {}) => {\n  const response = await apiClient.delete(url, { headers });\n  return response.data;\n};\n\n// GET 요청을 위한 함수 (accessToken이 필요한 GET 요청)\nexport const tokenGet = async (url, params = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  const response = await apiClient.get(url, { params, headers });\n  return response.data;\n};\n\n// POST 요청을 위한 함수 (accessToken이 필요한 POST 요청)\nexport const tokenPost = async (url, data = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n  \n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  console.log('tlqkf',data);\n  \n  const response = await apiClient.post(url, data, { headers });\n  return response.data;\n};\n\n// PUT 요청을 위한 함수 (accessToken이 필요한 PUT 요청)\nexport const tokenPut = async (url, data = {}, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  const response = await apiClient.put(url, data, { headers });\n  \n  return response.data;\n};\n\n// DELETE 요청을 위한 함수 (accessToken이 필요한 DELETE 요청)\nexport const tokenDel = async (url, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  const response = await apiClient.delete(url, { headers });\n  return response.data;\n};\n\n// Patch 요청을 위한 함수 (accessToken이 필요한 DELETE 요청)\nexport const tokenPatch = async (url, headers = {}) => {\n  const accessToken = getAccessToken();\n\n  // accessToken이 있으면 Authorization 헤더 추가\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  const response = await apiClient.patch(url, { headers });\n  return response.data;\n};\n","// src/services/loginService.js\nimport { get, post, put, del} from \"./apiClient\";\n\n// Google 로그인 URL을 얻는 API 호출\nexport const googleOAuthRedirectUriGet = async (headers = {}) => {\n  try {\n    const url = await get('/login/oauth2/google', {}, {}); // GET 요청 보내기\n    return url; // 로그인 URL 반환\n  } catch (error) {\n    console.error('Google 로그인 URL을 가져오는 데 실패했습니다:', error);\n    throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};\n\n// Google OAuth2 콜백 처리\nexport const googleOAuthLoginGet = async (headers = {}) => {\n  try {\n    const url = await get('/login/oauth2/code/google', {}, {}); // GET 요청 보내기\n    return url; // 로그인 URL 반환\n  } catch (error) {\n    console.error('Google 로그인 실패', error);\n    throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};\n\n// 임시 로그인 함수 (accessToken, refreshToken을 포함한 응답 반환)\nexport const tempLogin = async (data) => {\n  try {\n    console.log(\"tempLogin:\", data);\n\n    const response = await post(\"/login/oauth2/signUpOrLogin\", data, {});\n    console.log('tempLogin response:', response);  // 응답을 제대로 출력해보세요\n\n    // 응답 데이터에서 필요한 정보 반환\n    if (response) {\n      return response;  // response.data에 accessToken과 refreshToken이 포함되어 있음\n    } else {\n      throw new Error('응답 데이터가 없습니다.');\n    }\n  } catch (error) {\n    console.error(\"Login failed:\", error);\n    throw error;  // 에러 발생 시 호출한 곳으로 에러 전달\n  }\n};","import {tokenPost, tokenGet, tokenDel, tokenPut, post} from \"./apiClient\";\n  \n// 전체 폴더 목록 조회\nexport const folderGet = async (params) => {\n  try {\n    const response = await tokenGet(\"/folder\", params, {});\n    return response;\n  } catch (error) {\n    console.error(\"folderPost failed:\", error);\n    throw error;\n  }\n};\n\n// 폴더 추가\nexport const folderPost = async (data) => {\n  try {\n    console.log(\"folderPost\", data);\n\n    const response = await tokenPost(\"/folder\", data, {});\n    return response;\n  } catch (error) {\n    console.error(\"folderPost failed:\", error);\n    throw error;\n  }\n};\n  \n// 폴더 삭제\nexport const folderDelete = async (headers, id) => {\n  try {\n    const response = await tokenDel(\"/folder/\"+id, { headers });\n    return response;\n  } catch (error) {\n    console.error(\"folderPost failed:\", error);\n    throw error;\n  }\n};\n\n// 폴더 수정\nexport const folderPut = async (data, id) => {\n  try {\n    const response = await tokenPut(\"/folder/\"+id, data);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"folderPost failed:\", error);\n    throw error;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";  // Redux 관련 hooks\nimport { setTokens } from \"../redux/actions/authActions\"; // 액션 임포트\nimport \"../components/Layout/HeaderStyle.css\";\nimport \"./onBoarding-layout.css\";\nimport Button from \"../components/Button/Button\";\nimport { tempLogin } from \"../services/loginService\"; // Google 로그인 서비스 호출\nimport { folderGet, folderPost, folderDelete, folderPut} from \"../services/folderService\";\nimport { put } from \"../services/apiClient\";\nimport { linkCardPost, linkCardAiPost, linkCardListGet } from \"../services/linkCardService\";\nimport { settingGet, settingPatch } from \"../services/settingService\";\nimport { memberGet } from \"../services/memberService\";\n\nconst ImagePlaceholder = ({ width, height }) => {\n  const placeholderStyle = {\n    width: `${width}px`,\n    height: `${height}px`,\n  };\n\n  return (\n    <div className=\"image-placeholder\" style={placeholderStyle}>\n      이미지 자리 표시지\n    </div>\n  );\n};\n\nconst SignPage = () => {\n  const dispatch = useDispatch();  // dispatch 사용\n  \n  // 1. 컴포넌트 내부에서 folderList를 상태로 관리\n  const [folderList, setFolderList] = useState([]); // 초기값은 빈 배열로 설정\n  const [linkCardListDetail, setLinkCardListDetail] = useState([]); // 초기값은 빈 배열로 설정\n\n  // 임시 로그인 함수 호출 핸들러\n  const handleGoogleLogin = async () => {\n    try {\n      const data = {\n        \"email\": \"mg0454@gmail.com\",\n        \"name\": \"성명근\"\n      };\n\n      console.log(\"handleGoogleLogin:\", data);\n\n      const response = await tempLogin(data);  // tempLogin 호출\n  \n      console.log('Google Login Response:', response);  // 응답을 제대로 확인\n  \n      // 응답에서 accessToken, refreshToken 추출\n      if (response && response.accessToken && response.refreshToken) {\n        dispatch(setTokens(response.accessToken, response.refreshToken)); // 토큰 저장\n        console.log('로그인 성공!');  // 성공 메시지 설정\n        hanldeMemberGet();\n      } else {\n        console.log('로그인 응답에 문제가 있습니다.');  // 응답이 없거나 이상할 때 처리\n      }\n    } catch (err) {\n      console.log('Login Error:', err);\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 추가 핸들러\n  const hanldeFolderPost = async () => {\n    try {\n      const data = {\n        \"name\": \"ㅗㅗㅗ\"\n      };\n\n      console.log(\"hanldeFolderPost:\", data);\n\n      const response = await folderPost(data);\n\n      console.log('folderPost response:', response);  // 응답 값 확인\n      \n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);\n      }\n    } catch (err) {\n      console.error('폴더 추가 실패:', err);\n    }\n  };\n\n  // 폴더 조회 핸들러\n  const hanldeFolderGet = async () => {\n    try {\n      const headers = {};\n      const response = await folderGet();\n\n      if (response && response.floderList) {\n        // 새롭게 받아온 폴더 리스트를 상태에 저장\n        setFolderList(response.floderList);  \n      }\n      console.log('폴더 조회 응답:', response);\n    } catch (err) {\n      console.log('폴더 조회 실패!');\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 삭제 핸들러\n  const hanldeFolderDelete = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n\n    if (!lastFolder) {\n      console.log('삭제할 폴더가 없습니다.');  // 폴더가 없음을 로그로 출력\n      return;  // early return으로 함수 종료\n    }\n\n    console.log(lastFolder.id);\n\n    try {\n      const headers = {};\n      const response = await folderDelete(headers, lastFolder.id);\n\n      console.log('폴더 삭제 응답:', response);\n\n      // 폴더 삭제 후 폴더 목록 갱신\n      hanldeFolderGet();\n    } catch (err) {\n      console.log(err);\n      console.log('폴더 삭제 실패!');\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n\n  // 폴더 수정 핸들러\n  const hanldeFolderPut = async () => {\n    const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n\n    try {\n      const data = {\n        \"name\": \"김데데\"\n      };\n      const response = await folderPut(data, lastFolder.id);\n      console.log('folderPut response:', response);  // 응답 값 확인\n    } catch (err) {\n      console.error('폴더 수정 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeLinkCardPost = async () => {\n    try {\n      console.log(linkCardListDetail);\n      const response = await linkCardPost(linkCardListDetail);\n      console.log('linkCardPost response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('링크카드 추가 실패:', err);\n    }\n  };\n\n  const handleLinkCardAiPost = async () => {\n    try {\n      // 임의의 URL을 설정\n      const url = \"https://velog.io/@anhesu11/소프트웨어-공학-내용-정리2\";\n  \n      // URL에서 이미지 URL 추출\n      const imageUrl = await fetchImageUrlFromPage(url);\n  \n      // 헤더에 이미지 URL과 URL 추가\n      const data = {\n        \"url\": url,\n        \"imageUrl\": imageUrl,\n      };\n  \n      console.log('추출된 이미지 URL:', imageUrl);\n  \n      // API 요청 보내기 (예시: linkCardAiPost)\n      const response = await linkCardAiPost(data);\n\n      if (response) {\n        // 응답 데이터를 변환\n        // response가 객체일 경우 변환\n        const transformedData = {\n          title: response.title || \"Default Title\",\n          url: response.url || url, // 응답 데이터의 URL 또는 기본 URL\n          folderId: response.folder?.id || \"default-folder-id\", // 폴더 ID\n          tagList: response.tags?.map(tag => ({\n            id: tag.id || 0,\n            tagType: tag.tagType || \"AI/CUSTOM\",\n          })) || [],\n          memo: \"Default memo text\", // 기본 메모 추가\n          summary: response.summary || \"Default summary\",\n        };\n      \n        // 상태 업데이트\n        setLinkCardListDetail(transformedData); // 배열 형태로 상태에 저장\n        console.log('가공된 데이터:', transformedData);\n      }\n    } catch (err) {\n      console.error('링크카드 생성 실패:', err);\n    }\n  };\n\n    // 링크카드 조회 핸들러\n    const hanldeLinkCardListGet = async () => {\n      try {\n        const lastFolder = folderList.length > 0 ? folderList[folderList.length - 1] : null;\n\n        const response = await linkCardListGet(\n          lastFolder.id,\n          \"RECENTLY_SAVED\",\n          \"ASCENDING\",\n          0,\n          10\n        );\n        console.log('링크카드 리스트 조회 응답:', response);\n      } catch (err) {\n        console.log('링크카드 리스트 실패!');\n      } finally {\n        console.log('로딩 종료');  // 로딩 상태 종료\n      }\n    };\n\n  // 링크 추가 핸들러\n  const hanldeSettingGet = async () => {\n    try {\n      const headers = {\n        \"encryptedId\": \"string\",\n        \"isRemindAlarm\": false,\n        \"isRecommendAlarm\": true,\n        \"isNoticeAlarm\": true\n      };\n      const response = await settingGet(headers);\n      console.log('settingGet response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n\n  // 링크 추가 핸들러\n  const hanldeSettingPatch = async () => {\n    try {\n      const headers = {};\n      const response = await settingPatch(headers);\n      console.log('settingPatch response:', response);  // 응답 값 확인\n    \n    } catch (err) {\n      console.error('설정 조회 실패:', err);\n    }\n  };\n  \n  const fetchImageUrlFromPage = async (url) => {\n    try {\n      const proxyUrl = 'https://thingproxy.freeboard.io/fetch/';\n      const targetUrl = url;\n  \n      const response = await fetch(proxyUrl + targetUrl);\n      const html = await response.text(); // HTML 텍스트로 변환\n  \n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, 'text/html');\n  \n      // <meta> 태그에서 이미지 URL 추출 (OG 이미지 등)\n      let imageUrl = doc.querySelector('meta[property=\"og:image\"]')?.content;\n  \n      if (!imageUrl) {\n        // <img> 태그에서 src 추출\n        imageUrl = doc.querySelector('img')?.src;\n      }\n  \n      if (imageUrl) {\n        return imageUrl; // 이미지 URL 반환\n      } else {\n        throw new Error('이미지를 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('이미지 URL 추출 실패:', error);\n      throw error;\n    }\n  }; \n\n  // 폴더 조회 핸들러\n  const hanldeMemberGet = async () => {\n    try {\n      const headers = {};\n      const response = await memberGet();\n\n      console.log('멤버 조회 응답:', response);\n    } catch (err) {\n      console.log('멤버 조회 실패!');\n    } finally {\n      console.log('로딩 종료');  // 로딩 상태 종료\n    }\n  };\n    \n  return (\n    <div className=\"signpage\">\n      <header className=\"header\">\n        <img\n          className=\"logo\"\n          src=\"example.png\"\n          alt=\"logo\"\n          onClick={() => window.location.reload()}\n        />\n      </header>\n      <main className=\"sign-main-style\">\n        <div className=\"image-section\">\n          <ImagePlaceholder width={362} height={320} /> \n        </div>\n        <div className=\"text-section\">\n          <h1 className=\"sign-slogan\">서비스 메인 슬로건 코멘트</h1>\n          <p>서비스 서브 슬로건 및 기타 설명</p>\n          <div className=\"sign-text-button-wrapper\">\n            <Button\n              label=\"Google 계정으로 로그인\"\n              onClick={handleGoogleLogin} \n            />\n            <Button\n              label=\"폴더추가\"\n              onClick={hanldeFolderPost}\n            />\n            <Button\n              label=\"폴더조회\"\n              onClick={hanldeFolderGet}\n            />\n            <Button\n              label=\"폴더삭제\"\n              onClick={hanldeFolderDelete}\n            />\n            <Button\n              label=\"폴더수정\"\n              onClick={hanldeFolderPut}\n            />\n            <Button\n              label=\"링크카드추가\"\n              onClick={hanldeLinkCardPost}\n            />\n            <Button\n              label=\"링크카드Ai생성\"\n              onClick={handleLinkCardAiPost}\n            />\n            <Button\n              label=\"링크카드리스트조회\"\n              onClick={hanldeLinkCardListGet}\n            />\n            <Button\n              label=\"설정조회\"\n              onClick={hanldeSettingGet}\n            />\n            <Button\n              label=\"설정변경\"\n              onClick={hanldeSettingPatch}\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default SignPage;\n","import { get, post, put, del, tokenGet} from \"./apiClient\";\n\n// 현재 로그인한 사용자 정보 조회\nexport const memberGet = async (params = {}) => {\n    try {\n      const url = await tokenGet('/api/member/me', params); // GET 요청 보내기\n      return url; // 로그인 URL 반환\n    } catch (error) {\n      console.error('Google 로그인 URL을 가져오는 데 실패했습니다:', error);\n      throw error; // 에러 발생 시 호출한 곳으로 에러 전달\n    }\n  };","// src/redux/actions/authActions.js\nexport const setTokens = (accessToken, refreshToken) => ({\n    type: 'SET_TOKENS',\n    payload: { accessToken, refreshToken },\n  });\n  \n  export const clearTokens = () => ({\n    type: 'CLEAR_TOKENS',\n  });\n  ","import {tokenPost, tokenGet, tokenDel, tokenPut, tokenPatch} from \"./apiClient\";\n\n// 링크 카드 추가\nexport const linkCardPost = async (data) => {\n    try {\n        const response = await tokenPost(\"/linkCard\", data, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardPost failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 AI 정보 생성\nexport const linkCardAiPost = async (data) => {\n    try {\n        const response = await tokenPost(\"/linkCard/ai\", data, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardPost failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 태그 추가\nexport const linkCardTagPost = async (id, data) => {\n    try {\n        const response = await tokenPost(\"/linkCard/\"+id+\"/tag\", data, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardTagPost failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 태그 삭제\nexport const linkCardTagDelPost = async (id, tagId, tagType) => {\n    try {\n        const response = await tokenDel(\n            \"/linkCard/\"+id+\"/tag?\"+\n            \"tagId=\"+tagId+\n            \"&tagType=\"+tagType, {}, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardTagDel failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 방문\nexport const linkCardEnterPost = async (id) => {\n    try {\n        const response = await tokenPost(\"/linkCard/\"+id+\"/enter\", {}, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardEnter failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 휴지통 이동\nexport const linkCardDelete = async (id) => {\n    try {\n        const response = await tokenPost(\"/linkCard/\"+id+\"/delete\", {}, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardDelete failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 타이틀, 메모, 요약 수정\nexport const linkCardInfoPatch = async (id, data) => {\n    try {\n        const response = await tokenPatch(\"/linkCard/\"+id+\"/info\", data, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardEnter failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 폴더 변경\nexport const linkCardFolderPatch = async (id, data) => {\n    try {\n        const response = await tokenPatch(\"/linkCard/\"+id+\"/folder\", data, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardFolderPatch failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 조회\nexport const linkCardGet = async (id) => {\n    try {\n        const response = await tokenPatch(\"/linkCard/\"+id, {}, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardFolderPatch failed:\", error);\n        throw error;\n    }\n};\n\n// 링크 카드 리스트 조회\nexport const linkCardListGet = async (\n    folderId,\n    sortBy,\n    sortOrder,\n    lastId,\n    limit\n) => {\n    try {\n        const response = await tokenGet(\n            \"/linkCard/list/\"+folderId+\n            \"?sortBy=\"+sortBy+\n            \"&sortOrder=\"+sortOrder+\n            \"&lastId=\"+lastId+\n            \"&limit=\"+limit, \n            {}, {});\n        return response;\n    } catch (error) {\n        console.error(\"linkCardListGet failed:\", error);\n        throw error;\n    }\n};","import {tokenPost, tokenGet, tokenDel, tokenPut, tokenPatch} from \"./apiClient\";\n\nexport const settingGet = async (headers) => {\n    try {\n      const response = await tokenGet(\"/setting\", {}, { headers });\n      return response;\n    } catch (error) {\n      console.error(\"settingGet failed:\", error);\n      throw error;\n    }\n};\n\nexport const settingPatch = async (headers) => {\n    try {\n      const response = await tokenPatch(\"/setting/alarm\", {}, { headers });\n      return response;\n    } catch (error) {\n      console.error(\"settingPatch failed:\", error);\n      throw error;\n    }\n};","import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport \"./SideMenu.css\";\nimport Accordion from \"../Accordion/Accordion\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\nconst SideMenu = ({ isOpen }) => {\n  const location = useLocation();\n  const currentPath = location.pathname;\n  const isActive = (path) => currentPath === path;\n\n  const folderEdit = [\n    { img: \"example.png\", content: \"폴더 이름 수정\" },\n    { img: \"example.png\", content: \"폴더 삭제\" },\n  ].map((item) => ({\n    ...item,\n  }));\n\n  return (\n    <div>\n      <div className={`side-menu ${isOpen ? \"open\" : \"\"}`}>\n        <Link\n          to=\"/homepage\"\n          className={`home ${isActive(\"/homepage\") ? \"active\" : \"\"}`}\n        >\n          <img className=\"icon\" src=\"example.png\" alt=\"icon\" />\n          <p>홈</p>\n        </Link>\n        <div className=\"folder\">\n          <Accordion\n            type=\"SIDE_MENU\"\n            title=\"폴더\"\n            content={\n              <>\n                <Link\n                  to=\"/folderpage\"\n                  className={`folder-item ${\n                    isActive(\"/folderpage\") ? \"active\" : \"\"\n                  }`}\n                >\n                  폴더 1\n                </Link>\n                <Link\n                  to=\"/folder2\"\n                  className={`folder-item ${\n                    isActive(\"/folderpage\") ? \"active\" : \"\"\n                  }`}\n                >\n                  폴더 2\n                </Link>\n                <Link\n                  to=\"/folder3\"\n                  className={`folder-item ${\n                    isActive(\"/folderpage\") ? \"active\" : \"\"\n                  }`}\n                >\n                  폴더 3\n                </Link>\n              </>\n            }\n          />\n        </div>\n        <Link\n          to=\"/remindpage\"\n          className={`reminditems ${isActive(\"/remindpage\") ? \"active\" : \"\"}`}\n        >\n          <img className=\"icon\" src=\"example.png\" alt=\"icon\" />\n          <p>리마인드함</p>\n        </Link>\n        <Link\n          to=\"/removeditemspage\"\n          className={`removeditems ${\n            isActive(\"/removeditemspage\") ? \"active\" : \"\"\n          }`}\n        >\n          <img className=\"icon\" src=\"example.png\" alt=\"icon\" />\n          <p>휴지통</p>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default SideMenu;\n","import React, { useState } from \"react\";\nimport \"./LinkCard.css\";\nimport Dropdown from \"../Dropdown/Dropdown\";\nimport Button from \"../Button/Button\";\n\nconst LinkCard = ({ bookmark, onDelete, onEdit, onClick }) => {\n  const [hover, setHover] = useState(false);\n  const [folderOption, setFolderOption] = useState(\"\");\n  const folderOpt = [\"Documents\", \"Pictures\", \"Music\", \"Videos\"].map(\n    (item) => ({\n      label: item,\n      content: item,\n    })\n  );\n  const handleFolderOption = (option) => {\n    setFolderOption(option.content);\n  };\n\n  return (\n    <div\n      className=\"linkCard\"\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n      onClick={onClick}\n    >\n      <div className=\"link-card-top\">\n        <img className=\"image\" src={bookmark.img} alt={bookmark.title} />\n        {hover && (\n          <div className=\"hover-menus\">\n            <Dropdown\n              className=\"linkcard folder-name\"\n              options={folderOpt}\n              label=\"폴더\"\n              onSelect={handleFolderOption}\n            />\n            <Button className=\"linkcard alarm\" label=\"@\" />\n            <Button\n              className=\"linkcard delete\"\n              label=\"D\"\n              onClick={() => onDelete(bookmark.id)}\n            />\n            <Button\n              className=\"linkcard link\"\n              label=\"바로가기\"\n              onClick={() =>\n                window.open(bookmark.url, \"_blank\", \"noopener noreferrer\")\n              }\n            />\n          </div>\n        )}\n      </div>\n      <p className=\"details\">{bookmark.title}</p>\n    </div>\n  );\n};\n\nexport default LinkCard;\n","// BookmarkList.js\n\nimport React, { useState, useEffect } from \"react\";\nimport LinkCard from \"./LinkCard.js\";\nimport \"./ShowLinkCard.css\";\n\n//bookmarks : 북마크 데이터 배열(id, title, url 포함)\n//onDelete : 북마크 삭제 함수\n//북마크 목록 길이가 0보다 길면 렌더링\nconst ShowLinkCard = ({\n  bookmarks,\n  sideMenuOpen,\n  bookmarkDetailOpen,\n  onDelete,\n  onEdit,\n  onLinkCardClick,\n  sortingOption,\n  sortingDirOption,\n}) => {\n  const [gridColumns, setGridColumns] = useState(6); // 기본적으로 6개 열\n  // 화면 크기와 메뉴 상태에 따라 그리드 열 개수를 동적으로 설정하는 함수\n  const calculateGridColumns = () => {\n    const windowWidth = window.innerWidth;\n    let columns = 6; // 기본 열 개수\n\n    // 메뉴가 열렸을 경우 화면 길이를 빼고 계산\n    if (sideMenuOpen && bookmarkDetailOpen) {\n      columns = Math.floor(\n        (windowWidth -\n          20 *\n            parseFloat(getComputedStyle(document.documentElement).fontSize)) /\n          200\n      ); // sideMenu와 bookmarkDetail이 열렸을 때\n    } else if (sideMenuOpen || bookmarkDetailOpen) {\n      columns = Math.floor(\n        (windowWidth -\n          10 *\n            parseFloat(getComputedStyle(document.documentElement).fontSize)) /\n          200\n      ); // 하나만 열렸을 때\n    } else {\n      columns = Math.floor(windowWidth / 200); // 기본적으로 윈도우 창 크기에 맞춰\n    }\n\n    setGridColumns(columns);\n  };\n\n  // 화면 크기 변경 시 그리드 열 개수 재계산\n  useEffect(() => {\n    window.addEventListener(\"resize\", calculateGridColumns);\n    calculateGridColumns(); // 최초 렌더링 시 한 번 호출\n\n    // 이벤트 리스너 정리\n    return () => {\n      window.removeEventListener(\"resize\", calculateGridColumns);\n    };\n  }, [sideMenuOpen, bookmarkDetailOpen]); // 메뉴 상태가 변경될 때마다 호출\n\n  //Sorting\n  const sortBookmarks = (bookmarks, sortingOption, sortingDir) => {\n    let sorted = [...bookmarks];\n\n    if (sortingOption === \"최근저장\") {\n      sorted = sorted.sort((a, b) => b.id - a.id);\n    } else if (sortingOption === \"오래된저장\") {\n      sorted = sorted.sort((a, b) => a.id - b.id);\n    } else if (sortingOption === \"이름순\") {\n      sorted = sorted.sort((a, b) => a.title.localeCompare(b.title));\n    }\n    if (sortingDir === \"내림차순\") {\n      sorted = sorted.reverse();\n    }\n    return sorted;\n  };\n  const sortedBookmarks = sortBookmarks(\n    bookmarks,\n    sortingOption,\n    sortingDirOption\n  );\n\n  return (\n    <div\n      className=\"bookmark-grid\"\n      style={{ gridTemplateColumns: `repeat(${gridColumns}, 1fr)` }}\n    >\n      {sortedBookmarks.length > 0 ? (\n        sortedBookmarks.map((bookmark) => (\n          <LinkCard\n            key={bookmark.id} //리스트에서 고유 식별자 사용\n            bookmark={bookmark} //각 북마크 데이터를 BookmarkItem에 전달\n            onDelete={onDelete} //삭제 기능을 BookmarkItem에 전달\n            onEdit={onEdit}\n            onClick={() => {\n              console.log(\"Card clicked:\", bookmark);\n              onLinkCardClick(bookmark); // 안전하게 호출\n            }}\n          />\n        ))\n      ) : (\n        <p>...</p>\n      )}\n    </div>\n  );\n};\n\nexport default ShowLinkCard;\n","// src/components/Bookmark/BookmarkDetail.js\nimport React from \"react\";\nimport \"./BookmarkDetail.css\";\nimport Button from \"../Button/Button\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\nconst BookmarkDetail = ({ isOpen, bookmark, onEdit, onDelete, onClose }) => {\n  if (!bookmark) return <p>북마크를 선택하세요.</p>;\n\n  // 예시 데이터 추가\n  const exampleTags = [\"React\", \"JavaScript\", \"Frontend\", \"CSS\"];\n  const folderOpt = [\"폴더1\", \"폴더2\", \"폴더3\"];\n\n  return (\n    <div className={`bookmark-detail ${isOpen ? \"open\" : \"\"}`}>\n      {/* 상단 이미지 및 제목 */}\n      <div className=\"bookmark-detail-header\">\n        <img src=\"example.png\" alt={bookmark.title} className=\"detail-image\" />\n        <div className=\"detail-info\">\n          <div className=\"row\">\n            <Button label=\"링크 바로가기\" />\n            <Dropdown className=\"folder\" options={folderOpt} label=\"폴더선택\" />\n          </div>\n          <div className=\"detail-title-container\">\n            <h2 className=\"detail-title\">{bookmark.title}</h2>\n            <Button className=\"detail-edit\" label=\"수정\" />\n          </div>\n        </div>\n      </div>\n\n      {/* 자동 요약 */}\n      <h4>자동 요약</h4>\n      <div className=\"detail-summary\">\n        <h3>자동 요약</h3>\n        <p className=\"summary-text\">\n          AI가 생성한 요약 텍스트가 여기에 표시됩니다. 요약 내용을 넣을 수\n          있습니다.\n        </p>\n        <Button className=\"detail-edit\" label=\"수정\" />\n      </div>\n\n      {/* 추가 설명 */}\n      <h4>추가 설명</h4>\n      <div className=\"detail-description\">\n        <h3>추가 설명</h3>\n        <p className=\"description-text\">\n          추가 설명이 여기에 들어갑니다. 필요에 따라 더 많은 설명을 표시할 수\n          있습니다.\n        </p>\n        <Button className=\"detail-edit\" label=\"수정\" />\n      </div>\n\n      {/* 태그 섹션 */}\n      <div className=\"detail-tags\">\n        <h3>태그</h3>\n        <div className=\"tags-container\">\n          {exampleTags.map((tag, index) => (\n            <span key={index} className=\"tag-item\">\n              {tag}\n            </span>\n          ))}\n          <button className=\"add-tag-btn\">+</button>\n        </div>\n      </div>\n\n      {/* 닫기 버튼 */}\n      <button className=\"close-button\" onClick={onClose}>\n        닫기\n      </button>\n    </div>\n  );\n};\n\nexport default BookmarkDetail;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"../components/Layout/Header\";\nimport SideMenu from \"../components/SideMenu/SideMenu\";\nimport ShowLinkCard from \"../components/LinkCard/ShowLinkCard\";\nimport Dropdown from \"../components/Dropdown/Dropdown\";\nimport BookmarkDetail from \"../components/LinkCard/BookmarkDetail\";\n\nimport \"../components/Layout/main-layout.css\";\n\nconst RemovedItemsPage = ({ bookmarks, onAddBookmark, onDeleteBookmark }) => {\n  const [loading, setLoading] = useState(true); //로딩 상태\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [selectedBookmark, setSelectedBookmark] = useState(false);\n  const [sortingOption, setSortingOption] = useState(\"최근저장\");\n  const [sortingDirOption, setSortingDirOption] = useState(\"오름차순\");\n\n  const sortingOpt = [\"최근저장\", \"오래된저장\", \"이름순\"].map((item) => ({\n    label: item,\n    content: item,\n  }));\n  const sortingDirOpt = [\"오름차순\", \"내림차순\"].map((item) => ({\n    label: item,\n    content: item,\n  }));\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleDelete = (id) => onDeleteBookmark(id);\n\n  // SORTING\n  const handleSortingSelect = (option) => {\n    setSortingOption(option.content);\n  };\n  const handleSortingDirSelect = (option) => {\n    setSortingDirOption(option.content);\n  };\n\n  const handleBookmarkClick = (bookmark) => {\n    console.log(\"Clicked bookmark:\", bookmark);\n    setSelectedBookmark(bookmark); // 클릭된 북마크 상태 저장\n  };\n\n  const handleBookmarkClose = () => {\n    setSelectedBookmark(null); // 상세 정보를 닫기\n  };\n\n  return (\n    <div\n      className={`main-page ${isMenuOpen ? \"menu-open\" : \"\"} ${\n        selectedBookmark ? \"show-detail\" : \"\"\n      }`}\n    >\n      <Header toggleMenu={toggleMenu} />\n      <SideMenu isOpen={isMenuOpen} toggleMenu={toggleMenu} />\n      <section className=\"main-box\">\n        <h3>휴지통</h3>\n        <div className=\"selected-tags\"></div>\n\n        <div className=\"sorting-options\">\n          <Dropdown\n            className=\"sorting\"\n            label=\"최근저장\"\n            options={sortingOpt}\n            onSelect={handleSortingSelect}\n          />\n          <Dropdown\n            className=\"sorting\"\n            label=\"오름차순\"\n            options={sortingDirOpt}\n            onSelect={handleSortingDirSelect}\n          />\n        </div>\n\n        <ShowLinkCard\n          bookmarks={bookmarks}\n          onDelete={handleDelete}\n          onLinkCardClick={handleBookmarkClick} // 북마크 클릭 핸들러 전달\n          sideMenuOpen={isMenuOpen}\n          bookmarkDetailOpen={selectedBookmark}\n          sortingOption={sortingOption}\n          sortingDirOption={sortingDirOption}\n        />\n      </section>\n      {selectedBookmark && (\n        <div className=\"bookmark-detail-container\">\n          <BookmarkDetail\n            bookmark={selectedBookmark}\n            onEdit={() => console.log(\"Edit clicked\")}\n            onDelete={() => console.log(\"Delete clicked\")}\n            onClose={handleBookmarkClose}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RemovedItemsPage;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"../components/Layout/Header\";\nimport SideMenu from \"../components/SideMenu/SideMenu\";\nimport ShowLinkCard from \"../components/LinkCard/ShowLinkCard\";\nimport Dropdown from \"../components/Dropdown/Dropdown\";\nimport BookmarkDetail from \"../components/LinkCard/BookmarkDetail\";\n\nimport \"../components/Layout/main-layout.css\";\n\nconst FolderPage = ({ bookmarks, onDeleteBookmark }) => {\n  const [folderName, setFolderName] = useState(\"\"); //폴더명\n  const [loading, setLoading] = useState(true); //로딩 상태\n  const [sortingOption, setSortingOption] = useState(\"최근저장\"); //정렬 기준\n  const [sortingDirOption, setSortingDirOption] = useState(\"오름차순\"); //정렬 방향\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [selectedBookmark, setSelectedBookmark] = useState(null);\n\n  const sortingOpt = [\"최근저장\", \"오래된저장\", \"이름순\"].map((item) => ({\n    label: item,\n    content: item,\n  }));\n  const sortingDirOpt = [\"오름차순\", \"내림차순\"].map((item) => ({\n    label: item,\n    content: item,\n  }));\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  useEffect(() => {\n    const fetchUserInfo = async () => {\n      try {\n        // 폴더명 API 받아오기\n        const folderNameData = { label: \"폴더명\" };\n        setFolderName(folderNameData.label);\n\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Fail to get user information\", error);\n        setLoading(false);\n      }\n    };\n    fetchUserInfo();\n  }, []);\n\n  const handleDelete = (id) => onDeleteBookmark(id);\n  const handleEdit = (id) => {\n    //추후 수정 기능 코드 추가\n  };\n\n  // SORTING\n  const handleSortingSelect = (option) => {\n    setSortingOption(option.content);\n  };\n  const handleSortingDirSelect = (option) => {\n    setSortingDirOption(option.content);\n  };\n\n  const handleBookmarkClick = (bookmark) => {\n    console.log(\"Clicked bookmark:\", bookmark);\n    setSelectedBookmark(bookmark); // 클릭된 북마크 상태 저장\n  };\n\n  const handleBookmarkClose = () => {\n    setSelectedBookmark(null); // 상세 정보를 닫기\n  };\n\n  return (\n    <div\n      className={`main-page ${isMenuOpen ? \"menu-open\" : \"\"} ${\n        selectedBookmark ? \"show-detail\" : \"\"\n      }`}\n    >\n      <Header toggleMenu={toggleMenu} />\n      <SideMenu isOpen={isMenuOpen} toggleMenu={toggleMenu} />\n      <section className=\"main-box\">\n        <h3>{folderName}</h3>\n\n        <div className=\"sorting-options\">\n          <Dropdown\n            className=\"sorting\"\n            label=\"최근저장\"\n            options={sortingOpt}\n            onSelect={handleSortingSelect}\n          />\n          <Dropdown\n            className=\"sorting\"\n            label=\"오름차순\"\n            options={sortingDirOpt}\n            onSelect={handleSortingDirSelect}\n          />\n        </div>\n\n        <ShowLinkCard\n          bookmarks={bookmarks}\n          onDelete={handleDelete}\n          onEdit={handleEdit}\n          onLinkCardClick={handleBookmarkClick} // 북마크 클릭 핸들러 전달\n          sideMenuOpen={isMenuOpen}\n          bookmarkDetailOpen={selectedBookmark}\n          sortingOption={sortingOption}\n          sortingDirOption={sortingDirOption}\n        />\n      </section>\n      {selectedBookmark && (\n        <div className=\"bookmark-detail-container\">\n          <BookmarkDetail\n            bookmark={selectedBookmark}\n            onEdit={() => console.log(\"Edit clicked\")}\n            onDelete={() => console.log(\"Delete clicked\")}\n            onClose={handleBookmarkClose}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FolderPage;\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Header from \"../components/Layout/Header\";\nimport SideMenu from \"../components/SideMenu/SideMenu\";\nimport ShowLinkCard from \"../components/LinkCard/ShowLinkCard\";\nimport Button from \"../components/Button/Button\";\nimport { Link } from \"react-router-dom\";\n// import Tagcard from \"../components/Tagcard/Tagcard\";\n\nimport \"../components/Layout/main-layout.css\";\nimport RemovedItemsPage from \"./RemovedItemsPage\";\nimport FolderPage from \"./FolderPage\";\nimport BookmarkDetail from \"../components/LinkCard/BookmarkDetail\"; // 상세 정보 컴포넌트 import\n\nconst HomePage = ({ bookmarks, onAddBookmark, onDeleteBookmark }) => {\n  const location = useLocation();\n  const [username, setUsername] = useState(\"\"); //사용자 이름\n  const [mostPopularTags, setMostPopularTags] = useState(\"\");\n  const [loading, setLoading] = useState(true); //로딩 상태\n  const [isMenuOpen, setIsMenuOpen] = useState(false); //사이드메뉴 열림 상태\n  // const [sortingOption, setSortingOption] = useState(\"\");\n  // const [selectedTags, setSelectedTags] = useState([]);\n\n  // 북마크 선택 상태 추가\n  const [selectedBookmark, setSelectedBookmark] = useState(null);\n\n  const renderSection = () => {\n    switch (location.pathname) {\n      case \"/removeditemspage\":\n        return <RemovedItemsPage />;\n      case \"/folderpage\":\n        return (\n          <FolderPage bookmarks={bookmarks} onAddBookmark={handleAddBookmark} />\n        );\n      default:\n        return (\n          <div className=\"main-box\">\n            <h3>안녕하세요, {username}님!</h3>\n\n            <div className=\"link-set\">\n              <div className=\"_text\">\n                <p className=\"_title\">{username}님께 추천하는 링크</p>\n                <Link to=\"/homepage\" className=\"more\">\n                  더보기&gt;\n                </Link>\n              </div>\n              <ShowLinkCard\n                bookmarks={bookmarks}\n                onDelete={handleDelete}\n                onEdit={handleEdit}\n                onLinkCardClick={handleBookmarkClick} // 북마크 클릭 핸들러 전달\n                sideMenuOpen={isMenuOpen}\n                bookmarkDetailOpen={selectedBookmark}\n                // sortingOption={sortingOption}\n              />\n            </div>\n            <div className=\"link-set\">\n              <div className=\"_text\">\n                <p className=\"_title\">최근에 방문한 링크</p>\n                <Link to=\"/homepage\" className=\"more\">\n                  더보기&gt;\n                </Link>\n              </div>\n              <ShowLinkCard\n                bookmarks={bookmarks}\n                onDelete={handleDelete}\n                onEdit={handleEdit}\n                onLinkCardClick={handleBookmarkClick}\n                sideMenuOpen={isMenuOpen}\n                bookmarkDetailOpen={selectedBookmark}\n                // sortingOption={sortingOption}\n              />\n            </div>\n            <div className=\"link-set\">\n              <div className=\"_text\">\n                <p className=\"_title\">\n                  {username}님의 최다 태그\n                  <Button label={mostPopularTags} className=\"tag\" />를 포함한\n                  링크\n                </p>\n                <Link to=\"/homepage\" className=\"more\">\n                  더보기&gt;\n                </Link>\n              </div>\n              <ShowLinkCard\n                bookmarks={bookmarks}\n                onDelete={handleDelete}\n                onEdit={handleEdit}\n                onLinkCardClick={handleBookmarkClick}\n                sideMenuOpen={isMenuOpen}\n                bookmarkDetailOpen={selectedBookmark}\n                // sortingOption={sortingOption}\n              />\n            </div>\n          </div>\n        );\n    }\n  };\n\n  useEffect(() => {\n    const fetchUserInfo = async () => {\n      try {\n        // USER INFO\n        //const userResponse = await fetch(\"/api/user\");\n        //const userData = await userResponse.json();\n        const userData = { nickname: \"000\" };\n        setUsername(userData.nickname);\n\n        // MOST_POPULAR_TAGS\n        // const topTagsResponse = await fetch(\"/api/tags/top\");\n        // const topTagsData = await topTagsResponse.json();\n        const topTagsData = { label: \"탑태그\" };\n        setMostPopularTags(topTagsData.label);\n\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Fail to get user information\", error);\n        setLoading(false);\n      }\n    };\n    fetchUserInfo();\n  }, []);\n\n  const handleDelete = (id) => onDeleteBookmark(id);\n  const handleEdit = (id) => {\n    //추후 수정 기능 코드 추가\n  };\n  const handleAddBookmark = (newBookmark) => {\n    onAddBookmark(newBookmark);\n  };\n\n  const handleBookmarkClick = (bookmark) => {\n    console.log(\"Clicked bookmark:\", bookmark);\n    setSelectedBookmark(bookmark); // 클릭된 북마크 상태 저장\n  };\n\n  const handleBookmarkClose = () => {\n    setSelectedBookmark(null); // 상세 정보를 닫기\n  };\n\n  // TAG\n  // const handleTagSelect = (tag) => {\n  //   if (!selectedTags.includes(tag)) {\n  //     setSelectedTags([...selectedTags, tag]); //태그 추가\n  //   }\n  // };\n  // const handleTagRemove = (tag) => {\n  //   setSelectedTags(selectedTags.filter((t) => t !== tag)); //태그 제거\n  // };\n\n  // SORTING\n  // const handleSortingSelect = (option) => {\n  //   setSortingOption(option);\n  // };\n\n  //SideMenu Toggle\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  return (\n    <div\n      className={`main-page \n        ${isMenuOpen ? \"menu-open\" : \"\"} \n        ${selectedBookmark ? \"show-detail\" : \"\"}`}\n    >\n      <Header toggleMenu={toggleMenu} />\n      <SideMenu isOpen={isMenuOpen} toggleMenu={toggleMenu} />\n      <section>{renderSection()}</section>\n\n      {/* 상세 정보 */}\n      {selectedBookmark && (\n        <div className=\"bookmark-detail-container\">\n          <BookmarkDetail\n            bookmark={selectedBookmark}\n            onEdit={() => console.log(\"Edit clicked\")}\n            onDelete={() => console.log(\"Delete clicked\")}\n            onClose={handleBookmarkClose}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HomePage;\n","export const bookmarks = [\n  { id: 1, title: \"Google\", url: \"https://www.google.com\", img: \"example.png\" },\n  {\n    id: 5,\n    title: \"MDN Web Docs\",\n    url: \"https://developer.mozilla.org\",\n    img: \"example.png\",\n  },\n  { id: 6, title: \"React\", url: \"https://reactjs.org\", img: \"example.png\" },\n  {\n    id: 7,\n    title: \"YouTube\",\n    url: \"https://www.youtube.com\",\n    img: \"example.png\",\n  },\n  {\n    id: 8,\n    title: \"스택 프레임 이해하기\",\n    url: \"https://velog.io/@hamham/%EC%8A%A4%ED%83%9D%ED%94%84%EB%A0%88%EC%9E%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\",\n    img: \"example.png\",\n  },\n  {\n    id: 9,\n    title: \"URL이 두줄인데 제목도 두줄까지 길어진다면\",\n    url: \"https://www.kw.ac.kr/ko/life/notice.jsp?BoardMode=view&DUID=47837&tpage=1&searchKey=1&searchVal=&srCategoryId=\",\n    img: \"example.png\",\n  },\n  {\n    id: 12,\n    title: \"나의 ex..컬러버스<3\",\n    url: \"https://www.mk.co.kr/news/it/10882354\",\n    img: \"example.png\",\n  },\n  {\n    id: 13,\n    title: \"고슴도치의 가시는 털일까?\",\n    url: \"https://m.blog.naver.com/dnjsifjqjd/221181323254\",\n    img: \"example.png\",\n  },\n];\n","import React from \"react\";\n\nconst TermsPage = () => {\n  return (\n    <div>\n      <p>이용약관</p>\n    </div>\n  );\n};\n\nexport default TermsPage;\n","import React from \"react\";\n\nconst PrivacyPolicy = () => {\n  return (\n    <div>\n      <p>개인정보처리방침</p>\n    </div>\n  );\n};\n\nexport default PrivacyPolicy;\n","import React, { useState } from \"react\";\nimport { Routes, Route } from \"react-router-dom\"; // 라우터 import\nimport LandingPage from \"./pages/LandingPage\";\nimport SignPage from \"./pages/SignPage\";\n//import OnBoardingPage from \"./pages/OnBoardingPage\";\nimport HomePage from \"./pages/HomePage\";\nimport FolderPage from \"./pages/FolderPage\";\nimport RemovedItemsPage from \"./pages/RemovedItemsPage\";\nimport { bookmarks as initialBookmarks } from \"./components/LinkCard/bookmarks\";\nimport TermsPage from \"./pages/TermsPage\";\nimport PrivacyPolicy from \"./pages/PrivacyPolicy\";\nimport Typography from \"./styles/Typography/Typography\";\n\nimport \"./App.css\";\nimport \"./styles/color.css\";\n\nfunction App() {\n  const [bookmarks, setBookmarks] = useState(initialBookmarks);\n\n  const handleAddBookmark = (newBookmark) => {\n    setBookmarks((prevBookmarks) => [\n      ...prevBookmarks,\n      { id: Date.now(), ...newBookmark },\n    ]);\n  };\n  const handleDeleteBookmark = (id) => {\n    setBookmarks((prevBookmarks) => prevBookmarks.filter((b) => b.id !== id));\n  };\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<LandingPage />} />\n      <Route path=\"/signpage\" element={<SignPage />} />\n      <Route path=\"/termspage\" element={<TermsPage />} />\n      <Route path=\"/privacypolicy\" element={<PrivacyPolicy />} />\n\n      <Route\n        path=\"/homepage\"\n        element={\n          <HomePage\n            bookmarks={bookmarks}\n            onAddBookmark={handleAddBookmark}\n            onDeleteBookmark={handleDeleteBookmark}\n          />\n        }\n      />\n\n      <Route\n        path=\"/folderpage\"\n        element={\n          <FolderPage\n            bookmarks={bookmarks}\n            onAddBookmark={handleAddBookmark}\n            onDeleteBookmark={handleDeleteBookmark}\n          />\n        }\n      />\n      <Route\n        path=\"/removeditemspage\"\n        element={\n          <RemovedItemsPage\n            bookmarks={bookmarks}\n            onAddBookmark={handleAddBookmark}\n            onDeleteBookmark={handleDeleteBookmark}\n          />\n        }\n      />\n    </Routes>\n  );\n}\n\nexport default App;\n","// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom'; // Router를 index.js에서 사용\nimport { Provider } from 'react-redux';  // 추가: Redux Provider 임포트\nimport store from './redux/store';  // Redux 스토어 불러오기\nimport App from './App';\nimport './styles/Typography/Typography.css';\n\n// root에 Provider로 스토어 제공\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>  {/* Redux store를 제공 */}\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}